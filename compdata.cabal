Name:			compdata
Version:		0.1
Synopsis:            	Compositional Data Types
Description:		Compositional Data Types. An extension of Wouter Swierstra's Functional Pearl: /Data types a la carte/.
Category:            	Data
License:		BSD3
License-file:		LICENSE
Author:			Patrick Bahr, Tom Hvitved
Maintainer:		paba@diku.dk
Build-Type:		Custom
Cabal-Version:          >=1.8.0.6

flag test
  description: Build test executable.
  default:     False

flag benchmark
  description: Build benchmark executable.
  default:     False

library
  Exposed-Modules:      Data.Comp, Data.Comp.Product, Data.Comp.Sum,
                        Data.Comp.Term, Data.Comp.Algebra, Data.Comp.Equality,
                        Data.Comp.Ordering, Data.Comp.DeepSeq, Data.Comp.Generic
                        Data.Comp.TermRewriting, Data.Comp.Automata,
                        Data.Comp.Arbitrary, Data.Comp.Show, Data.Comp.Variables,
                        Data.Comp.Decompose, Data.Comp.Unification,
                        Data.Comp.Derive, Data.Comp.Matching, Data.Comp.Multi,
                        Data.Comp.Multi.Term, Data.Comp.Multi.Sum,
                        Data.Comp.Multi.HFunctor, Data.Comp.Multi.HExpFunctor,
                        Data.Comp.Multi.Algebra,
                        Data.Comp.Multi.Product, Data.Comp.Multi.HShow,
                        Data.Comp.Multi.HEquality, Data.Comp.Multi.Variables,
                        Data.Comp.Multi.Ops, Data.Comp.Ops, Data.Comp.ExpFunctor

  Other-Modules:        Data.Comp.Derive.Utils, Data.Comp.Derive.Equality,
                        Data.Comp.Derive.Ordering, Data.Comp.Derive.Arbitrary,
                        Data.Comp.Derive.Show, Data.Comp.Derive.DeepSeq,
                        Data.Comp.Derive.SmartConstructors, Data.Comp.Derive.Foldable,
                        Data.Comp.Derive.Traversable, Data.Comp.Derive.HFunctor,
                        Data.Comp.Derive.HFoldable, Data.Comp.Derive.HTraversable,
                        Data.Comp.Derive.HEquality, Data.Comp.Derive.HShow,
                        Data.Comp.Derive.ExpFunctor, Data.Comp.Derive.HExpFunctor,

                        Data.Comp.Derive.SmartMConstructors

  Build-Depends:	base >= 4, template-haskell, containers, mtl, QuickCheck >= 2, derive, deepseq, th-expand-syns
  hs-source-dirs:	src
  ghc-options:          -W -O2
  if flag(benchmark)
    buildable:     False

Executable test
  Main-is:		Data_Test.hs
  Build-Depends:	base >= 4, template-haskell, containers, mtl, QuickCheck >= 2, test-framework, test-framework-quickcheck2, derive, th-expand-syns
  hs-source-dirs:	src testsuite/tests
  ghc-options:          -fhpc
  if !flag(test)
    buildable:     False

Executable benchmark
  Main-is:		Benchmark.hs
  Build-Depends:	base >= 4, template-haskell, containers, mtl, QuickCheck >= 2, derive, deepseq, criterion, random, uniplate, th-expand-syns
  hs-source-dirs:	src benchmark
  ghc-options:          -W -O2
  cpp-options:          -DNO_RULES
  if !flag(benchmark)
    buildable:     False